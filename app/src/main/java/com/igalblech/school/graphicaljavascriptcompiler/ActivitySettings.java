package com.igalblech.school.graphicaljavascriptcompiler;

import android.app.AlertDialog;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.MenuItem;
import android.widget.FrameLayout;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.preference.Preference;
import androidx.preference.PreferenceFragmentCompat;
import androidx.preference.SwitchPreference;

import com.igalblech.school.graphicaljavascriptcompiler.utils.gallery.ProjectSettingsDatabase;
import com.igalblech.school.graphicaljavascriptcompiler.utils.userdata.UserData;
import com.igalblech.school.graphicaljavascriptcompiler.utils.userdata.UserDataDatabase;

import static com.igalblech.school.graphicaljavascriptcompiler.utils.gallery.ProjectSettingsDatabase.Constants.COLUMN_USERNAME;
import static com.igalblech.school.graphicaljavascriptcompiler.utils.gallery.ProjectSettingsDatabase.Constants.PRIVATE_TABLE_NAME;
import static com.igalblech.school.graphicaljavascriptcompiler.utils.gallery.ProjectSettingsDatabase.Constants.PUBLIC_TABLE_NAME;

/**
 * App settings activity, generated by the "New Android Activity" as "Settings Activity"
 */
public class ActivitySettings extends AppCompatActivity {

    private FrameLayout flSettings;

    private UserData userData;

    @Override
    protected void onCreate ( Bundle savedInstanceState ) {
        super.onCreate ( savedInstanceState );
        setContentView ( R.layout.activity_settings );

        Bundle bundle = getIntent().getExtras();
        if (bundle != null) {
            this.userData = (UserData) bundle.get ( "user_data" );
        }

        if (savedInstanceState == null) {
            getSupportFragmentManager ( )
                    .beginTransaction ( )
                    .replace ( R.id.flSettings, new SettingsFragment (
                            userData,
                            getSharedPreferences ( getString(R.string.preference_file_key), MODE_PRIVATE ) ) )
                    .commit ( );
        }
        ActionBar actionBar = getSupportActionBar ( );
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled ( true );
        }
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId ( ) == android.R.id.home) {
            this.finish ( );
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    public static class SettingsFragment extends PreferenceFragmentCompat {

        private final UserData userData;
        private final SharedPreferences sharedPreferences;

        public SettingsFragment(@NonNull UserData userData, SharedPreferences sharedPreferences) {
            this.userData = userData;
            this.sharedPreferences = sharedPreferences;
        }

        @Override
        public void onCreatePreferences ( Bundle savedInstanceState, String rootKey ) {
            setPreferencesFromResource ( R.xml.root_preferences, rootKey );

            Preference preferenceDeleteProjects = getPreferenceManager().findPreference("delete_all_project");
            assert preferenceDeleteProjects != null;
            preferenceDeleteProjects.setOnPreferenceClickListener ( preference -> {
                AlertDialog.Builder builder = new AlertDialog.Builder ( getContext () );
                AlertDialog alertDialog = builder.create ();
                builder.setTitle ( "Are you sure?" );
                builder.setMessage ( "Do you want to delete all of your projects from your private and public gallery?" );
                builder.setPositiveButton ( "Ok", ( dialog, which ) -> {
                    deleteAllProjects ();
                } );
                builder.setNegativeButton ( "Cancel", ( dialog, which ) -> {
                    alertDialog.dismiss ();
                } );
                builder.create ().show ();

                return true;
            } );

            Preference preferenceDeleteUser = getPreferenceManager().findPreference("delete_user");
            assert preferenceDeleteUser != null;
            preferenceDeleteUser.setOnPreferenceClickListener ( preference -> {
                AlertDialog.Builder builder = new AlertDialog.Builder ( getContext () );
                AlertDialog alertDialog = builder.create ();
                builder.setTitle ( "Are you sure?" );
                builder.setMessage ( "Do you want to delete your user?" );
                builder.setPositiveButton ( "Ok", ( dialog, which ) -> {
                    deleteAllProjects ();
                    UserDataDatabase database = new UserDataDatabase ( getContext () );
                    database.deleteUser (userData);
                } );
                builder.setNegativeButton ( "Cancel", ( dialog, which ) -> {
                    alertDialog.dismiss ();
                } );
                builder.create ().show ();

                return true;
            } );

            SwitchPreference preferenceEnableFilter = getPreferenceManager().findPreference("enable_filter");
            assert preferenceEnableFilter != null;
            preferenceEnableFilter.setOnPreferenceChangeListener ( ( preference, newValue ) -> updateBoolPreferences ( "enable_filter", (Boolean) newValue ) );

            SwitchPreference preferenceEnableAntialiasing = getPreferenceManager().findPreference("enable_antialiasing");
            assert preferenceEnableAntialiasing != null;
            preferenceEnableAntialiasing.setOnPreferenceChangeListener ( ( preference, newValue ) -> updateBoolPreferences ( "enable_antialiasing", (Boolean) newValue ) );

            SwitchPreference preferenceEnableDither = getPreferenceManager().findPreference("enable_dithering");
            assert preferenceEnableDither != null;
            preferenceEnableDither.setOnPreferenceChangeListener ( ( preference, newValue ) -> updateBoolPreferences ( "enable_dithering", (Boolean) newValue ) );

        }

        public boolean updateBoolPreferences(String key, boolean value) {
            if (sharedPreferences == null) return false;
            sharedPreferences.edit ( ).putBoolean ( key, value ).apply ( );
            return true;
        }

        public void deleteAllProjects() {
            ProjectSettingsDatabase database = new ProjectSettingsDatabase ( getContext (), null );
            database.deleteProjectsBy ( PRIVATE_TABLE_NAME, COLUMN_USERNAME, userData.getUsername ( ) );
            database.deleteProjectsBy ( PUBLIC_TABLE_NAME, COLUMN_USERNAME, userData.getUsername ( ) );
        }


    }
}